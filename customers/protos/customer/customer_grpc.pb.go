// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	Save(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	FindByID(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CustomerService_FindByIDClient, error)
	FindByEmail(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CustomerService_FindByEmailClient, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Save(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FindByID(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CustomerService_FindByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomerService_ServiceDesc.Streams[0], "/customer.CustomerService/FindByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceFindByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_FindByIDClient interface {
	Recv() (*CustomerResponse, error)
	grpc.ClientStream
}

type customerServiceFindByIDClient struct {
	grpc.ClientStream
}

func (x *customerServiceFindByIDClient) Recv() (*CustomerResponse, error) {
	m := new(CustomerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerServiceClient) FindByEmail(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (CustomerService_FindByEmailClient, error) {
	stream, err := c.cc.NewStream(ctx, &CustomerService_ServiceDesc.Streams[1], "/customer.CustomerService/FindByEmail", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceFindByEmailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_FindByEmailClient interface {
	Recv() (*CustomerResponse, error)
	grpc.ClientStream
}

type customerServiceFindByEmailClient struct {
	grpc.ClientStream
}

func (x *customerServiceFindByEmailClient) Recv() (*CustomerResponse, error) {
	m := new(CustomerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations should embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	Save(context.Context, *CustomerRequest) (*CustomerResponse, error)
	FindByID(*QueryRequest, CustomerService_FindByIDServer) error
	FindByEmail(*QueryRequest, CustomerService_FindByEmailServer) error
}

// UnimplementedCustomerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) Save(context.Context, *CustomerRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedCustomerServiceServer) FindByID(*QueryRequest, CustomerService_FindByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (UnimplementedCustomerServiceServer) FindByEmail(*QueryRequest, CustomerService_FindByEmailServer) error {
	return status.Errorf(codes.Unimplemented, "method FindByEmail not implemented")
}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Save(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FindByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).FindByID(m, &customerServiceFindByIDServer{stream})
}

type CustomerService_FindByIDServer interface {
	Send(*CustomerResponse) error
	grpc.ServerStream
}

type customerServiceFindByIDServer struct {
	grpc.ServerStream
}

func (x *customerServiceFindByIDServer) Send(m *CustomerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerService_FindByEmail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).FindByEmail(m, &customerServiceFindByEmailServer{stream})
}

type CustomerService_FindByEmailServer interface {
	Send(*CustomerResponse) error
	grpc.ServerStream
}

type customerServiceFindByEmailServer struct {
	grpc.ServerStream
}

func (x *customerServiceFindByEmailServer) Send(m *CustomerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _CustomerService_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindByID",
			Handler:       _CustomerService_FindByID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindByEmail",
			Handler:       _CustomerService_FindByEmail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "customer.proto",
}
